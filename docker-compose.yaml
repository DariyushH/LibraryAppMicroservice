
services:
  postgres:
    image: 'postgres:13.3'
    container_name: postgres
    environment:
      - 'POSTGRES_DB=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  mongodb:
    image: mongo:5.0
    container_name: mongo
    ports:
      - '27017:27017'
    healthcheck:
      test: [ "CMD", "mongo", "--quiet", "--eval", "printjson(db.adminCommand('ping'))" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - my-network

  consul:
    image: consul:1.15.0
    container_name: consul
    ports:
      - '8500:8500'
    command: [ "agent", "-dev", "-client", "0.0.0.0" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8500/v1/status/leader" ]
      interval: 1s
      retries: 10
      timeout: 5s
      start_period: 30s
    networks:
      - my-network

  config-server:
    build: ./config-server
    container_name: config-server
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_URL=jdbc:postgresql://postgres:5432/postgres'
    healthcheck:
      test: [ "CMD", "curl", "-X", "GET", "localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 3s
      retries: 60
      start_period: 15s
    depends_on:
      consul:
        condition: service_healthy
    networks:
      - my-network

  gateway:
    build: ./gateway-service
    container_name: gateway
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_URL=jdbc:postgresql://postgres:5432/postgres'
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - '8080:8080'
    networks:
      - my-network

  image-service:
    build: ./image-service
    container_name: image-service
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092'
    depends_on:
      consul:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - my-network

  user-service:
    build: ./user-service
    container_name: user-service
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_URL=jdbc:postgresql://postgres:5432/postgres'
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - my-network

  book-service:
    build: ./book-service
    container_name: book-service
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_URL=jdbc:postgresql://postgres:5432/postgres'
      - 'SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092'
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - my-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - my-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  my-network:
    driver: bridge